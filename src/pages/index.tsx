import { useEffect, useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import type { Account, Invoice, Session, User } from "@/../types"
import { api } from "@/utils/api";
import InvoiceItem from "@/components/InvoiceItem";
import { TypeOf } from "zod";
import QuickStart from "@/components/Buttons/QuickStart/QuickStart";
import QuickEasy from "@/components/Home/QuickEasy";
import Navbar from "@/components/Navbar/Navbar";
import InvoiceWidget from "@/components/InvoiceWidget/InvoiceWidget";
import GetStarted from "@/components/Buttons/GetStarted/GetStarted";
import Image from "next/image";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex-col z-0">
        <div className="relative">
          <div className="ml-[120px]">
            <Navbar />
          </div>
          <div className="flex-col">
            <div>
              <div>
                <div className="ml-72 mt-[150px] flex-col text-center w-[600px] space-y-5">
                  <div>
                    <h1 className="text-6xl font-bold text-[#161D1B] content-center">Professional</h1>
                  </div>
                  <div>
                    <h1 className="text-6xl font-bold text-[#161D1B] content-center">Invoicing Solution</h1>
                  </div>
                </div>

              </div>
            </div>
            <div className="ml-auto mr-auto relative">
              <div className="ml-64 mt-[200px]">
                <QuickEasy />
              </div>
              <div className="">
                <GetStarted />
              </div>

              <InvoiceWidget />

            </div>
          </div>
        </div>
      </main >
    </>
  );
};


export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();
  const createInvoice = api.invoice.createInvoice.useMutation();
  const { data: allInvoices } = api.invoice.getAll.useQuery({ id: sessionData?.user?.id as string });
  const [invoices, setInvoices] = useState<typeof allInvoices>(allInvoices);
  // const updateInvoice = api.invoice.updateInvoice.useMutation();
  const deleteInvoice = api.invoice.deleteInvoice.useMutation();
  const deleteAllInvoices = api.invoice.deleteAllInvoices.useMutation();
  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  const deleteInvoiceFn = async (id: string) => {
    await deleteInvoice.mutateAsync({ id });
  }
  const deleteAllInvoicesFn = async () => {
    await deleteAllInvoices.mutateAsync({ id: sessionData?.user?.id as string });
  }
  useEffect(() => {
    setInvoices(allInvoices);
  }, [deleteInvoiceFn])

  return (
    <div>
      <div className={''}>
        <p className={''}>
          {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
          {secretMessage && <span> - {secretMessÄ‘age}</span>}
        </p>
        <button
          className={''}
          onClick={sessionData ? () => void signOut() : () => void signIn()}
        >
          {sessionData ? "Sign out" : "Sign in"}
        </button>
        {sessionData && (
          <div>
            <div>
              <button onClick={() => {
                createInvoice.mutate({ id: sessionData?.user?.id })
              }}>Create a fake invoice</button>
            </div>
            <div>
              <button onClick={() => {
                deleteAllInvoicesFn().then(() => {
                  console.log("deleted all invoices");
                })
                  .catch((err) => {
                    console.log(err);
                  }
                  )
              }}>Delete all invoices</button>
            </div>
            <div>
              {invoices && invoices?.length > 0 ? invoices?.map((invoice_item) => (
                <div key={invoice_item.id}>
                  <InvoiceItem deletecb={deleteInvoiceFn} invoice={invoice_item} key={invoice_item.id} />
                </div>
              )) : <div>
                <h1>No invoices</h1></div>}
            </div>
          </div>
        )}
      </div>
    </div >
  );
};
