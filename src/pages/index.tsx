import styles from "./index.module.css";
import { useEffect, useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import type { Account, Invoice, Session, User } from "@/../types"
import { api } from "@/utils/api";
import InvoiceItem from "@/components/InvoiceItem";
import { TypeOf } from "zod";
import QuickStart from "@/components/Buttons/QuickStart";
import QuickEasy from "@/components/Home/QuickEasy";
import Navbar from "@/components/Navbar/Navbar";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.mainContainer}>
        <div>
          <div>
            <Navbar />
          </div>
          <div>
            <QuickEasy />
          </div>
        </div>
      </main>
    </>
  );
};


export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();
  const createInvoice = api.invoice.createInvoice.useMutation();
  const { data: allInvoices } = api.invoice.getAll.useQuery({ id: sessionData?.user?.id as string });
  const [invoices, setInvoices] = useState<typeof allInvoices>(allInvoices);
  // const updateInvoice = api.invoice.updateInvoice.useMutation();
  const deleteInvoice = api.invoice.deleteInvoice.useMutation();
  const deleteAllInvoices = api.invoice.deleteAllInvoices.useMutation();
  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  const deleteInvoiceFn = async (id: string) => {
    await deleteInvoice.mutateAsync({ id });
  }
  const deleteAllInvoicesFn = async () => {
    await deleteAllInvoices.mutateAsync({ id: sessionData?.user?.id as string });
  }
  useEffect(() => {
    setInvoices(allInvoices);
  }, [deleteInvoiceFn])

  return (
    <div>
      <div className={styles.authContainer}>
        <p className={styles.showcaseText}>
          {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
          {secretMessage && <span> - {secretMessage}</span>}
        </p>
        <button
          className={styles.loginButton}
          onClick={sessionData ? () => void signOut() : () => void signIn()}
        >
          {sessionData ? "Sign out" : "Sign in"}
        </button>
        {sessionData && (
          <div>
            <div>
              <button onClick={() => {
                createInvoice.mutate({ id: sessionData?.user?.id })
              }}>Create a fake invoice</button>
            </div>
            <div>
              <button onClick={() => {
                deleteAllInvoicesFn().then(() => {
                  console.log("deleted all invoices");
                })
                  .catch((err) => {
                    console.log(err);
                  }
                  )
              }}>Delete all invoices</button>
            </div>
            <div>
              {invoices && invoices?.length > 0 ? invoices?.map((invoice_item) => (
                <div key={invoice_item.id}>
                  <InvoiceItem deletecb={deleteInvoiceFn} invoice={invoice_item} key={invoice_item.id} />
                </div>
              )) : <div>
                <h1>No invoices</h1></div>}
            </div>
          </div>
        )}
      </div>
    </div >
  );
};
