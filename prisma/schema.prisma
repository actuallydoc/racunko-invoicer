generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  services      String?
  accounts      Account[]
  companies     Company[]
  invoices      Invoice[]
  partners      Partner[]
  sessions      Session[]
  Service       Service[]
}

model Invoice {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String
  services           String?
  invoiceNumber      String
  invoiceDate        DateTime
  dueDate            DateTime
  invoiceServiceDate DateTime
  status             String
  companyId          String
  partnerId          String
  Partner            Partner  @relation(fields: [partnerId], references: [id])
  Company            Company  @relation(fields: [companyId], references: [id])
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  address   String
  city      String
  zip       String
  country   String
  phone     String
  email     String
  website   String?
  vat       String
  services  String?
  userId    String?
  User      User?     @relation(fields: [userId], references: [id])
  invoices  Invoice[]
  partners  Partner[] @relation("CompanyToPartner")
}

model Partner {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  address   String
  city      String
  zip       String
  country   String
  phone     String
  email     String
  website   String?
  vat       String?
  services  String?
  userId    String?
  invoices  Invoice[]
  User      User?     @relation(fields: [userId], references: [id])
  companies Company[] @relation("CompanyToPartner")
}

model Service {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  price       Float
  description String?
  quantity    Int
  userId      String?
  User        User?    @relation(fields: [userId], references: [id])
}
